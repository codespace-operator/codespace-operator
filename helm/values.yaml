image:
  repository: ghcr.io/codespace-operator/codespace-operator
  tag: "0.1.0"
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

replicaCount: 1

rbac:
  create: true

serviceAccount:
  create: true
  name: ""

metrics:
  enabled: true
  secure: true
  bindAddress: :8443
  service:
    # default name is computed; you can override with tpl:
    # name: '{{ include "codespace-operator.fullname" . }}-metrics-service'
    type: ClusterIP
    annotations: {}
    port: 8443
    targetPort: 8443
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: 30s
    scrapeTimeout: 10s
    labels: {}

webhook:
  enabled: false
  certPath: ""
  certName: tls.crt
  certKey: tls.key

enableHTTP2: false

resources:
  limits: {}
  requests:
    cpu: 100m
    memory: 128Mi

nodeSelector: {}
tolerations: []
affinity: {}

extraArgs: []

podAnnotations: {}
podLabels: {}

securityContext: {}
containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true

ingressClass:
  enabled: false
  name: "codespace-operator"
  controller: "k8s.io/ingress-controller/codespace-operator"

server:
  enabled: true
  image:
    repository: ghcr.io/codespace-operator/codespace-server
    tag: "0.1.0"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    # default is {{ include "codespace-operator.server.name" . }} (tpl-aware via helper)
    # name: ""
    port: 8080
    gRPCPort: 9090
    annotations: {}
    name: codespace-operator
  probes:
    readinessPath: /readyz
    livenessPath: /healthz
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: console.codespace.test
        path: /
    tls: [] # e.g. - secretName: console-tls; hosts: [console.codespace.test]
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  useManagerServiceAccount: true  # reuses the session-controller SA (kept key for compatibility)
