name: Verify Release (PR)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      # operator lane
      - "internal/**"
      - "cmd/**"
      - "ui/**"
      - "Dockerfile"
      - "Dockerfiles/**"
      - "go.mod"
      - "go.sum"
      # crd lane
      - "api/**"
      - "config/crd/**"
      - "hack/**"
      # ignore changelogs like in release workflows
      - "!CHANGELOG.*.md"

permissions:
  contents: read
  packages: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.head.sha }}
  cancel-in-progress: true
jobs:
  filter:
    name: Detect release lanes
    runs-on: ubuntu-latest
    outputs:
      operator: ${{ steps.changes.outputs.operator }}
      crd: ${{ steps.changes.outputs.crd }}
      crd_would_release: ${{ steps.crdtitle.outputs.needed }}
    steps:
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            operator:
              - 'internal/**'
              - 'cmd/**'
              - 'ui/**'
              - 'Dockerfile'
              - 'Dockerfiles/**'
              - 'go.mod'
              - 'go.sum'
            crd:
              - 'api/**'
              - 'config/crd/**'
              - 'hack/**'

      - name: Decide if CRD release would happen from PR title
        id: crdtitle
        shell: bash
        run: |
          set -euo pipefail
          TITLE="${{ github.event.pull_request.title }}"
          BODY="${{ github.event.pull_request.body }}"
          # extract type and optional scopes from "type(scope1,scope2): subject"
          if [[ "$TITLE" =~ ^(feat|fix|perf|revert)(\(([^\)]+)\))?: ]]; then
            SCOPES="${BASH_REMATCH[3]:-}"
            if echo "$SCOPES" | grep -Eiq '(^|,|\s)(crd|crds)(,|\s|$)'; then
              echo "needed=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            # allow BREAKING with CRD scopes mentioned in body (optional)
            if echo "$BODY" | grep -Eiq 'BREAKING( CHANGE| CHANGES)?' && \
               echo "$BODY" | grep -Eiq '(^|,|\s)(crd|crds)(,|\s|$)'; then
              echo "needed=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi
          echo "needed=false" >> "$GITHUB_OUTPUT"

  operator:
    name: Operator lane - build test
    needs: filter
    if: github.event.pull_request.draft == false && needs.filter.outputs.operator == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: |
            ui/package-lock.json

      - name: Build server binary (same as release.prepare)
        run: make build-server

      - name: Setup Docker Buildx
        uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Build operator image (no push)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t codespace-operator:test-pr-${{ github.event.number }}-${{ github.sha }} \
            --load \
            .

      - name: Build server image (no push)
        run: |
          set -e
          if grep -q "^docker-build-server" Makefile 2>/dev/null; then
            # Try Makefile target if available; ensure it doesn't push
            make docker-build-server SERVER_IMG=codespace-server:test-pr-${{ github.event.number }}-${{ github.sha }} PUSH=false || true
          elif [ -f Dockerfiles/server.Dockerfile ]; then
            docker buildx build \
              --platform linux/amd64 \
              -f Dockerfiles/server.Dockerfile \
              -t codespace-server:test-pr-${{ github.event.number }}-${{ github.sha }} \
              --load \
              .
          else
            echo "⚠️ Skipping server image build (no Make target or Dockerfiles/server.Dockerfile found)."
          fi

      - name: (Preview) semantic-release dry-run for notes
        uses: actions/setup-node@v4
        with: { node-version: "22" }
      - run: npm i -D semantic-release @semantic-release/changelog @semantic-release/exec @semantic-release/git @semantic-release/github
      - run: npx semantic-release -e ./.github/release-config/release.operator.cjs --dry-run

  crd:
    name: CRD lane — pack test
    needs: filter
    if: >
      github.event.pull_request.draft == false &&
      needs.filter.outputs.crd == 'true' &&
      needs.filter.outputs.crd_would_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Generate & package CRDs (mirrors release.prepare)
        run: |
          set -euo pipefail
          make manifests
          make kustomize
          mkdir -p dist
          VERSION="0.0.0-pr.${{ github.event.number }}+sha.${{ github.sha }}"
          ./bin/kustomize build config/crd > "dist/codespace-operator-${VERSION}-crds.yaml"
          tar -czf "dist/codespace-operator-crds-${VERSION}.tgz" -C config/crd bases
          (cd dist && sha256sum "codespace-operator-${VERSION}-crds.yaml" "codespace-operator-crds-${VERSION}.tgz" > SHA256SUMS.txt)

      - name: Upload CRD artifacts
        uses: actions/upload-artifact@v4
        with:
          name: crd-bundle
          path: |
            dist/codespace-operator-*-crds.yaml
            dist/codespace-operator-crds-*.tgz
            dist/SHA256SUMS.txt

      - name: (Preview) semantic-release dry-run for notes
        uses: actions/setup-node@v4
        with: { node-version: "22" }
      - run: npm i -D semantic-release @semantic-release/changelog @semantic-release/exec @semantic-release/git @semantic-release/github
      - run: npx semantic-release -e ./.github/release-config/release.crd.cjs --dry-run
