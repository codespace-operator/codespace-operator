/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  readonly "/api/v1/admin/rbac/reload": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /**
     * Reload RBAC (Admin)
     * @description Force reload of RBAC policies (requires admin privileges)
     */
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description OK */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": {
              readonly [key: string]: string;
            };
          };
        };
        /** @description Unauthorized */
        readonly 401: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
        /** @description Forbidden */
        readonly 403: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/v1/admin/system/info": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * System Info
     * @description Check system information (requires admin privileges)
     */
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description OK */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": {
              readonly [key: string]: unknown;
            };
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/v1/admin/users": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * List users (Admin)
     * @description Get list of users in the system (requires admin privileges)
     */
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description User list with admin info */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": {
              readonly [key: string]: unknown;
            };
          };
        };
        /** @description Unauthorized */
        readonly 401: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
        /** @description Forbidden */
        readonly 403: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/v1/introspect": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * Introspect (legacy combined)
     * @deprecated
     * @description Deprecated: prefer /api/v1/introspect/user or /api/v1/introspect/server
     */
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Combined user+server info */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": {
              readonly [key: string]: unknown;
            };
          };
        };
        /** @description Unauthorized */
        readonly 401: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/v1/introspect/server": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * Server introspection
     * @description Get server and cluster information
     */
    readonly get: {
      readonly parameters: {
        readonly query?: {
          /** @description Whether to discover namespaces (0 or 1) */
          readonly discover?: string;
        };
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description OK */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ServerIntrospectionResponse"];
          };
        };
        /** @description Unauthorized */
        readonly 401: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
        /** @description Forbidden */
        readonly 403: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/v1/introspect/user": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * User introspection
     * @description Get user-specific permissions and capabilities
     */
    readonly get: {
      readonly parameters: {
        readonly query?: {
          /** @description Comma-separated list of namespaces to check */
          readonly namespaces?: string;
          /** @description Comma-separated list of actions to check */
          readonly actions?: string;
        };
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description OK */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.UserIntrospectionResponse"];
          };
        };
        /** @description Unauthorized */
        readonly 401: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/v1/me": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * Get current user
     * @description Get information about the current authenticated user
     */
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description OK */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.UserInfo"];
          };
        };
        /** @description Unauthorized */
        readonly 401: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/v1/server/sessions": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * List sessions
     * @description Get a list of codespace sessions, optionally across all namespaces
     */
    readonly get: operations["listSessions"];
    readonly put?: never;
    /**
     * Create session
     * @description Create a new codespace session
     */
    readonly post: operations["createSession"];
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly [path: `/api/v1/server/sessions/${string}/${string}`]: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * Get session
     * @description Get details of a specific session
     */
    readonly get: operations["getSession"];
    /**
     * Update session
     * @description Update a session (full replacement)
     */
    readonly put: operations["updateSession"];
    readonly post?: never;
    /**
     * Delete session
     * @description Delete a codespace session
     */
    readonly delete: operations["deleteSession"];
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly [path: `/api/v1/server/sessions/${string}/${string}/scale`]: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /**
     * Scale session
     * @description Scale the number of replicas for a session
     */
    readonly post: operations["scaleSession"];
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/v1/stream/sessions": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * Stream sessions
     * @description Stream real-time session updates via Server-Sent Events
     */
    readonly get: {
      readonly parameters: {
        readonly query?: {
          /** @description Target namespace */
          readonly namespace?: string;
          /** @description Stream sessions from all namespaces */
          readonly all?: boolean;
        };
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description SSE stream */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/event-stream": string;
          };
        };
        /** @description Unauthorized */
        readonly 401: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/event-stream": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
        /** @description Forbidden */
        readonly 403: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/event-stream": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/v1/user/permissions": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * User permissions
     * @description Get detailed user permissions
     */
    readonly get: {
      readonly parameters: {
        readonly query?: {
          /** @description Comma-separated list of namespaces */
          readonly namespaces?: string;
          /** @description Comma-separated list of actions */
          readonly actions?: string;
        };
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description OK */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.UserPermissions"];
          };
        };
        /** @description Unauthorized */
        readonly 401: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/auth/features": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * Get authentication features
     * @description Get available authentication methods and endpoints
     */
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description OK */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.AuthFeatures"];
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/auth/local/login": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /**
     * Local login
     * @description Authenticate using username and password
     */
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      /** @description Login credentials */
      readonly requestBody: {
        readonly content: {
          readonly "application/json": components["schemas"]["cmd_server.LocalLoginRequest"];
        };
      };
      readonly responses: {
        /** @description OK */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.LoginResponse"];
          };
        };
        /** @description Unauthorized */
        readonly 401: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/auth/logout": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * Logout
     * @description Clears session cookie. If SSO configured, redirects to the provider’s end-session endpoint.
     */
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description OK */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": {
              readonly [key: string]: string;
            };
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/auth/sso/callback": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * OIDC callback
     * @description Handles provider callback, mints session cookie, then redirects.
     */
    readonly get: {
      readonly parameters: {
        readonly query: {
          /** @description OIDC state */
          readonly state: string;
          /** @description Authorization code */
          readonly code: string;
        };
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Redirect */
        readonly 302: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "*/*": string;
          };
        };
        /** @description unauthorized */
        readonly 401: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "*/*": string;
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/auth/sso/login": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * OIDC start
     * @description Redirect to OIDC provider with PKCE/state. Optional `next` query to return to path.
     */
    readonly get: {
      readonly parameters: {
        readonly query?: {
          /** @description Relative path to return to after login */
          readonly next?: string;
        };
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Redirect */
        readonly 302: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "*/*": string;
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/healthz": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * Health check
     * @description Check if the service is healthy
     */
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description ok */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/plain": string;
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/readyz": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /**
     * Readiness check
     * @description Check if the service is ready to accept traffic
     */
    readonly get: {
      readonly parameters: {
        readonly query?: {
          /** @description Namespace to test connectivity */
          readonly namespace?: string;
        };
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description ready */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/plain": string;
          };
        };
        /** @description not ready */
        readonly 503: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/plain": string;
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
};
export type webhooks = Record<string, never>;
export type components = {
  schemas: {
    /** @description Available authentication features and endpoints */
    readonly "cmd_server.AuthFeatures": {
      /** @example false */
      readonly localLoginEnabled?: boolean;
      /** @example /auth/local/login */
      readonly localLoginPath?: string;
      /** @example true */
      readonly ssoEnabled?: boolean;
      /** @example /auth/sso/login */
      readonly ssoLoginPath?: string;
    };
    readonly "cmd_server.CasbinPermissions": {
      readonly namespaces?: components["schemas"]["cmd_server.NamespacePermissions"];
    };
    readonly "cmd_server.ClusterInfo": {
      readonly casbin?: components["schemas"]["cmd_server.CasbinPermissions"];
      readonly serverServiceAccount?: components["schemas"]["cmd_server.ServiceAccountInfo"];
    };
    readonly "cmd_server.DomainPermissions": {
      readonly session?: {
        readonly [key: string]: boolean;
      };
    };
    readonly "cmd_server.ErrorResponse": {
      /** @example Invalid request */
      readonly error?: string;
    };
    /** @description Local login credentials */
    readonly "cmd_server.LocalLoginRequest": {
      /** @example secretpassword */
      readonly password: string;
      /** @example alice */
      readonly username: string;
    };
    /** @description Successful authentication response */
    readonly "cmd_server.LoginResponse": {
      /** @example [
       *       "editor",
       *       "viewer"
       *     ] */
      readonly roles?: readonly string[];
      readonly token?: string;
      /** @example alice */
      readonly user?: string;
    };
    readonly "cmd_server.NamespaceInfo": {
      /** @description Namespaces user can access */
      readonly userAllowed?: readonly string[];
      /** @description Namespaces user can create sessions in */
      readonly userCreatable?: readonly string[];
      /** @description Namespaces user can delete sessions from */
      readonly userDeletable?: readonly string[];
    };
    readonly "cmd_server.NamespacePermissions": {
      readonly list?: boolean;
      readonly watch?: boolean;
    };
    readonly "cmd_server.PermissionCheck": {
      readonly action?: string;
      readonly allowed?: boolean;
      readonly namespace?: string;
      readonly resource?: string;
    };
    readonly "cmd_server.ServerIntrospectionResponse": {
      readonly capabilities?: components["schemas"]["cmd_server.SystemCapabilities"];
      readonly cluster?: components["schemas"]["cmd_server.ClusterInfo"];
      readonly namespaces?: components["schemas"]["cmd_server.ServerNamespaceInfo"];
      readonly version?: components["schemas"]["cmd_server.ServerVersionInfo"];
    };
    readonly "cmd_server.ServerNamespaceInfo": {
      /** @description All namespaces (if discoverable) */
      readonly all?: readonly string[];
      /** @description Namespaces containing sessions */
      readonly withSessions?: readonly string[];
    };
    readonly "cmd_server.ServerVersionInfo": {
      readonly buildDate?: string;
      readonly gitCommit?: string;
      readonly version?: string;
    };
    readonly "cmd_server.ServiceAccountInfo": {
      readonly namespaces?: components["schemas"]["cmd_server.NamespacePermissions"];
      readonly session?: {
        readonly [key: string]: boolean;
      };
    };
    /** @description Request body for creating a new codespace session */
    readonly "cmd_server.SessionCreateRequest": {
      readonly auth?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.AuthSpec"];
      readonly home?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.PVCSpec"];
      /** @example my-session */
      readonly name: string;
      /** @example default */
      readonly namespace?: string;
      readonly networking?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.NetSpec"];
      readonly profile: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.ProfileSpec"];
      /** @example 1 */
      readonly replicas?: number;
      readonly scratch?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.PVCSpec"];
    };
    /** @description Response containing list of sessions with metadata */
    readonly "cmd_server.SessionListResponse": {
      readonly filtered?: boolean;
      readonly items?: readonly components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.Session"][];
      /** @example [
       *       "default",
       *       "kube-system"
       *     ] */
      readonly namespaces?: readonly string[];
      /** @example 5 */
      readonly total?: number;
    };
    /** @description Request body for scaling a session */
    readonly "cmd_server.SessionScaleRequest": {
      /** @example 2 */
      readonly replicas?: number;
    };
    readonly "cmd_server.SystemCapabilities": {
      /** @description Whether system supports multiple tenants */
      readonly multiTenant?: boolean;
    };
    readonly "cmd_server.UserCapabilities": {
      /** @description Whether user has admin privileges */
      readonly adminAccess?: boolean;
      /** @description Whether user has any cluster-level access */
      readonly clusterScope?: boolean;
      /** @description Effective namespace scope for user */
      readonly namespaceScope?: readonly string[];
    };
    /** @description Current authenticated user information */
    readonly "cmd_server.UserInfo": {
      /** @example alice@company.com */
      readonly email?: string;
      /** @example 1641081600 */
      readonly exp?: number;
      /** @example 1640995200 */
      readonly iat?: number;
      /** @example [
       *       "inherited-role"
       *     ] */
      readonly implicitRoles?: readonly string[];
      /** @example oidc */
      readonly provider?: string;
      /** @example [
       *       "editor",
       *       "viewer"
       *     ] */
      readonly roles?: readonly string[];
      /** @example alice@company.com */
      readonly subject?: string;
      /** @example alice */
      readonly username?: string;
    };
    readonly "cmd_server.UserIntrospectionResponse": {
      readonly capabilities?: components["schemas"]["cmd_server.UserCapabilities"];
      readonly domains?: {
        readonly [
          key: string
        ]: components["schemas"]["cmd_server.DomainPermissions"];
      };
      readonly namespaces?: components["schemas"]["cmd_server.NamespaceInfo"];
      readonly user?: components["schemas"]["cmd_server.UserInfo"];
    };
    readonly "cmd_server.UserPermissions": {
      /** @description namespace -> allowed actions */
      readonly namespaces?: {
        readonly [key: string]: readonly string[];
      };
      readonly permissions?: readonly components["schemas"]["cmd_server.PermissionCheck"][];
      readonly roles?: readonly string[];
      readonly subject?: string;
    };
    readonly "github_com_codespace-operator_codespace-operator_api_v1.AuthSpec": {
      /** @description +kubebuilder:validation:Enum=oauth2proxy;none
       *     +kubebuilder:default=none */
      readonly mode?: string;
      readonly oidc?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.OIDCRef"];
    };
    readonly "github_com_codespace-operator_codespace-operator_api_v1.NetSpec": {
      readonly annotations?: {
        readonly [key: string]: string;
      };
      readonly host?: string;
      readonly tlsSecretName?: string;
    };
    readonly "github_com_codespace-operator_codespace-operator_api_v1.OIDCRef": {
      readonly clientIDSecret?: string;
      readonly clientSecretRef?: string;
      /** @description +kubebuilder:validation:Pattern=`^https?://` */
      readonly issuerURL?: string;
    };
    readonly "github_com_codespace-operator_codespace-operator_api_v1.PVCSpec": {
      /** @description +kubebuilder:validation:MinLength=1 */
      readonly mountPath?: string;
      /** @description +kubebuilder:validation:Pattern=`^\d+(Gi|Mi)$` */
      readonly size?: string;
      readonly storageClassName?: string;
    };
    readonly "github_com_codespace-operator_codespace-operator_api_v1.ProfileSpec": {
      readonly cmd?: readonly string[];
      /** @description +kubebuilder:validation:Enum=jupyterlab;vscode;rstudio;custom */
      readonly ide?: string;
      /** @description +kubebuilder:validation:MinLength=1 */
      readonly image?: string;
    };
    readonly "github_com_codespace-operator_codespace-operator_api_v1.Session": {
      /** @description APIVersion defines the versioned schema of this representation of an object.
       *     Servers should convert recognized schemas to the latest internal value, and
       *     may reject unrecognized values.
       *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
       *     +optional */
      readonly apiVersion?: string;
      /** @description Kind is a string value representing the REST resource this object represents.
       *     Servers may infer this from the endpoint the client submits requests to.
       *     Cannot be updated.
       *     In CamelCase.
       *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
       *     +optional */
      readonly kind?: string;
      readonly metadata?: components["schemas"]["v1.ObjectMeta"];
      readonly spec?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.SessionSpec"];
      readonly status?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.SessionStatus"];
    };
    readonly "github_com_codespace-operator_codespace-operator_api_v1.SessionSpec": {
      readonly auth?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.AuthSpec"];
      readonly home?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.PVCSpec"];
      readonly networking?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.NetSpec"];
      readonly profile?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.ProfileSpec"];
      readonly replicas?: number;
      readonly scratch?: components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.PVCSpec"];
    };
    readonly "github_com_codespace-operator_codespace-operator_api_v1.SessionStatus": {
      /** @description Pending | Ready | Error */
      readonly phase?: string;
      readonly reason?: string;
      readonly url?: string;
    };
    readonly "v1.FieldsV1": Record<string, never>;
    readonly "v1.ManagedFieldsEntry": {
      /** @description APIVersion defines the version of this resource that this field set
       *     applies to. The format is "group/version" just like the top-level
       *     APIVersion field. It is necessary to track the version of a field
       *     set because it cannot be automatically converted. */
      readonly apiVersion?: string;
      /** @description FieldsType is the discriminator for the different fields format and version.
       *     There is currently only one possible value: "FieldsV1" */
      readonly fieldsType?: string;
      /** @description FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
       *     +optional */
      readonly fieldsV1?: components["schemas"]["v1.FieldsV1"];
      /** @description Manager is an identifier of the workflow managing these fields. */
      readonly manager?: string;
      /** @description Operation is the type of operation which lead to this ManagedFieldsEntry being created.
       *     The only valid values for this field are 'Apply' and 'Update'. */
      readonly operation?: components["schemas"]["v1.ManagedFieldsOperationType"];
      /** @description Subresource is the name of the subresource used to update that object, or
       *     empty string if the object was updated through the main resource. The
       *     value of this field is used to distinguish between managers, even if they
       *     share the same name. For example, a status update will be distinct from a
       *     regular update using the same manager name.
       *     Note that the APIVersion field is not related to the Subresource field and
       *     it always corresponds to the version of the main resource. */
      readonly subresource?: string;
      /** @description Time is the timestamp of when the ManagedFields entry was added. The
       *     timestamp will also be updated if a field is added, the manager
       *     changes any of the owned fields value or removes a field. The
       *     timestamp does not update when a field is removed from the entry
       *     because another manager took it over.
       *     +optional */
      readonly time?: string;
    };
    /** @enum {string} */
    readonly "v1.ManagedFieldsOperationType": "Apply" | "Update";
    readonly "v1.ObjectMeta": {
      /** @description Annotations is an unstructured key value map stored with a resource that may be
       *     set by external tools to store and retrieve arbitrary metadata. They are not
       *     queryable and should be preserved when modifying objects.
       *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
       *     +optional */
      readonly annotations?: {
        readonly [key: string]: string;
      };
      /** @description CreationTimestamp is a timestamp representing the server time when this object was
       *     created. It is not guaranteed to be set in happens-before order across separate operations.
       *     Clients may not set this value. It is represented in RFC3339 form and is in UTC.
       *
       *     Populated by the system.
       *     Read-only.
       *     Null for lists.
       *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
       *     +optional */
      readonly creationTimestamp?: string;
      /** @description Number of seconds allowed for this object to gracefully terminate before
       *     it will be removed from the system. Only set when deletionTimestamp is also set.
       *     May only be shortened.
       *     Read-only.
       *     +optional */
      readonly deletionGracePeriodSeconds?: number;
      /** @description DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
       *     field is set by the server when a graceful deletion is requested by the user, and is not
       *     directly settable by a client. The resource is expected to be deleted (no longer visible
       *     from resource lists, and not reachable by name) after the time in this field, once the
       *     finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
       *     Once the deletionTimestamp is set, this value may not be unset or be set further into the
       *     future, although it may be shortened or the resource may be deleted prior to this time.
       *     For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
       *     by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
       *     the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
       *     remove the pod from the API. In the presence of network partitions, this object may still
       *     exist after this timestamp, until an administrator or automated process can determine the
       *     resource is fully terminated.
       *     If not set, graceful deletion of the object has not been requested.
       *
       *     Populated by the system when a graceful deletion is requested.
       *     Read-only.
       *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
       *     +optional */
      readonly deletionTimestamp?: string;
      /** @description Must be empty before the object is deleted from the registry. Each entry
       *     is an identifier for the responsible component that will remove the entry
       *     from the list. If the deletionTimestamp of the object is non-nil, entries
       *     in this list can only be removed.
       *     Finalizers may be processed and removed in any order.  Order is NOT enforced
       *     because it introduces significant risk of stuck finalizers.
       *     finalizers is a shared field, any actor with permission can reorder it.
       *     If the finalizer list is processed in order, then this can lead to a situation
       *     in which the component responsible for the first finalizer in the list is
       *     waiting for a signal (field value, external system, or other) produced by a
       *     component responsible for a finalizer later in the list, resulting in a deadlock.
       *     Without enforced ordering finalizers are free to order amongst themselves and
       *     are not vulnerable to ordering changes in the list.
       *     +optional
       *     +patchStrategy=merge
       *     +listType=set */
      readonly finalizers?: readonly string[];
      /** @description GenerateName is an optional prefix, used by the server, to generate a unique
       *     name ONLY IF the Name field has not been provided.
       *     If this field is used, the name returned to the client will be different
       *     than the name passed. This value will also be combined with a unique suffix.
       *     The provided value has the same validation rules as the Name field,
       *     and may be truncated by the length of the suffix required to make the value
       *     unique on the server.
       *
       *     If this field is specified and the generated name exists, the server will return a 409.
       *
       *     Applied only if Name is not specified.
       *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
       *     +optional */
      readonly generateName?: string;
      /** @description A sequence number representing a specific generation of the desired state.
       *     Populated by the system. Read-only.
       *     +optional */
      readonly generation?: number;
      /** @description Map of string keys and values that can be used to organize and categorize
       *     (scope and select) objects. May match selectors of replication controllers
       *     and services.
       *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
       *     +optional */
      readonly labels?: {
        readonly [key: string]: string;
      };
      /** @description ManagedFields maps workflow-id and version to the set of fields
       *     that are managed by that workflow. This is mostly for internal
       *     housekeeping, and users typically shouldn't need to set or
       *     understand this field. A workflow can be the user's name, a
       *     controller's name, or the name of a specific apply path like
       *     "ci-cd". The set of fields is always in the version that the
       *     workflow used when modifying the object.
       *
       *     +optional
       *     +listType=atomic */
      readonly managedFields?: readonly components["schemas"]["v1.ManagedFieldsEntry"][];
      /** @description Name must be unique within a namespace. Is required when creating resources, although
       *     some resources may allow a client to request the generation of an appropriate name
       *     automatically. Name is primarily intended for creation idempotence and configuration
       *     definition.
       *     Cannot be updated.
       *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
       *     +optional */
      readonly name?: string;
      /** @description Namespace defines the space within which each name must be unique. An empty namespace is
       *     equivalent to the "default" namespace, but "default" is the canonical representation.
       *     Not all objects are required to be scoped to a namespace - the value of this field for
       *     those objects will be empty.
       *
       *     Must be a DNS_LABEL.
       *     Cannot be updated.
       *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
       *     +optional */
      readonly namespace?: string;
      /** @description List of objects depended by this object. If ALL objects in the list have
       *     been deleted, this object will be garbage collected. If this object is managed by a controller,
       *     then an entry in this list will point to this controller, with the controller field set to true.
       *     There cannot be more than one managing controller.
       *     +optional
       *     +patchMergeKey=uid
       *     +patchStrategy=merge
       *     +listType=map
       *     +listMapKey=uid */
      readonly ownerReferences?: readonly components["schemas"]["v1.OwnerReference"][];
      /** @description An opaque value that represents the internal version of this object that can
       *     be used by clients to determine when objects have changed. May be used for optimistic
       *     concurrency, change detection, and the watch operation on a resource or set of resources.
       *     Clients must treat these values as opaque and passed unmodified back to the server.
       *     They may only be valid for a particular resource or set of resources.
       *
       *     Populated by the system.
       *     Read-only.
       *     Value must be treated as opaque by clients and .
       *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
       *     +optional */
      readonly resourceVersion?: string;
      /** @description Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
       *     +optional */
      readonly selfLink?: string;
      /** @description UID is the unique in time and space value for this object. It is typically generated by
       *     the server on successful creation of a resource and is not allowed to change on PUT
       *     operations.
       *
       *     Populated by the system.
       *     Read-only.
       *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
       *     +optional */
      readonly uid?: string;
    };
    readonly "v1.OwnerReference": {
      /** @description API version of the referent. */
      readonly apiVersion?: string;
      /** @description If true, AND if the owner has the "foregroundDeletion" finalizer, then
       *     the owner cannot be deleted from the key-value store until this
       *     reference is removed.
       *     See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
       *     for how the garbage collector interacts with this field and enforces the foreground deletion.
       *     Defaults to false.
       *     To set this field, a user needs "delete" permission of the owner,
       *     otherwise 422 (Unprocessable Entity) will be returned.
       *     +optional */
      readonly blockOwnerDeletion?: boolean;
      /** @description If true, this reference points to the managing controller.
       *     +optional */
      readonly controller?: boolean;
      /** @description Kind of the referent.
       *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
      readonly kind?: string;
      /** @description Name of the referent.
       *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names */
      readonly name?: string;
      /** @description UID of the referent.
       *     More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids */
      readonly uid?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
  readonly listSessions: {
    readonly parameters: {
      readonly query?: {
        /** @description Target namespace */
        readonly namespace?: string;
        /** @description List sessions across all namespaces */
        readonly all?: boolean;
      };
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description OK */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.SessionListResponse"];
        };
      };
      /** @description Unauthorized */
      readonly 401: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Forbidden */
      readonly 403: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
    };
  };
  readonly createSession: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    /** @description Session creation request */
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["cmd_server.SessionCreateRequest"];
      };
    };
    readonly responses: {
      /** @description Created */
      readonly 201: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.Session"];
        };
      };
      /** @description Bad Request */
      readonly 400: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      readonly 401: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Forbidden */
      readonly 403: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
    };
  };
  readonly getSession: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path: {
        /** @description Namespace */
        readonly namespace: string;
        /** @description Session name */
        readonly name: string;
      };
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description OK */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.Session"];
        };
      };
      /** @description Unauthorized */
      readonly 401: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Forbidden */
      readonly 403: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Not Found */
      readonly 404: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
    };
  };
  readonly updateSession: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path: {
        /** @description Namespace */
        readonly namespace: string;
        /** @description Session name */
        readonly name: string;
      };
      readonly cookie?: never;
    };
    /** @description Session update request */
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["cmd_server.SessionCreateRequest"];
      };
    };
    readonly responses: {
      /** @description OK */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.Session"];
        };
      };
      /** @description Bad Request */
      readonly 400: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      readonly 401: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Forbidden */
      readonly 403: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Not Found */
      readonly 404: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
    };
  };
  readonly deleteSession: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path: {
        /** @description Namespace */
        readonly namespace: string;
        /** @description Session name */
        readonly name: string;
      };
      readonly cookie?: never;
    };
    readonly requestBody?: never;
    readonly responses: {
      /** @description OK */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": {
            readonly [key: string]: string;
          };
        };
      };
      /** @description Unauthorized */
      readonly 401: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Forbidden */
      readonly 403: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Not Found */
      readonly 404: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
    };
  };
  readonly scaleSession: {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path: {
        /** @description Namespace */
        readonly namespace: string;
        /** @description Session name */
        readonly name: string;
      };
      readonly cookie?: never;
    };
    /** @description Scale request */
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["cmd_server.SessionScaleRequest"];
      };
    };
    readonly responses: {
      /** @description OK */
      readonly 200: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["github_com_codespace-operator_codespace-operator_api_v1.Session"];
        };
      };
      /** @description Bad Request */
      readonly 400: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Unauthorized */
      readonly 401: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Forbidden */
      readonly 403: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
      /** @description Not Found */
      readonly 404: {
        headers: {
          readonly [name: string]: unknown;
        };
        content: {
          readonly "application/json": components["schemas"]["cmd_server.ErrorResponse"];
        };
      };
    };
  };
}
